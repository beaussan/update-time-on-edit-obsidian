import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import copy from 'esbuild-plugin-copy';
import { replace } from 'esbuild-plugin-replace';
import 'dotenv/config';
import chokidar from 'chokidar';
import fs from 'fs-jetpack';
import { basename } from 'path';
import { browserslistToTargets, transform } from 'lightningcss';
import browserslist from 'browserslist';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['src/main.ts'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'dist/main.js',
  plugins: [
    replace({
      values: {
        __DEV_MODE__: !prod,
      },
      exclude: /.*utils.ts/,
    }),
    copy({
      resolveFrom: 'cwd',
      assets: [
        {
          from: ['./manifest.json'],
          to: ['./dist/manifest.json'],
        },
      ],
      watch: true,
    }),
  ],
});

const distDir = fs.path('.', 'dist');

async function watchCopyToVault() {
  if (!process.env.OBSIDIAN_VAULT) {
    console.error('No OBSIDIAN_VAULT env provided, will not sync to vault.');
    return;
  }
  const pluginDir = fs.path(
    process.env.OBSIDIAN_VAULT,
    '.obsidian',
    'plugins',
    'update-time-on-edit',
  );

  if (!fs.exists(pluginDir)) {
    console.error('No plugin dir found. Skipping local install.');
    return;
  }

  const onTrigger = (path) => {
    const dist = fs.path(pluginDir, basename(path));
    fs.copy(path, dist, { overwrite: true });
    console.log(`[obsidian] ${path} -> ${dist}`);
  };

  const watcher = chokidar.watch(distDir);
  watcher.on('change', onTrigger);
  watcher.on('add', onTrigger);
}

// Call this once per build.
let targets = browserslistToTargets(browserslist('>= 0.25%'));
const sourceCssFilePath = fs.path('.', 'styles.css');

async function processCss() {
  const content = fs.read(sourceCssFilePath, 'buffer');
  const { code } = transform({
    filename: 'style.css',
    code: content,
    minify: false,
    sourceMap: false,
    drafts: {
      nesting: true,
    },
    targets,
  });
  fs.write(fs.path(distDir, 'styles.css'), code);
  console.log('[css] compiled css');
}

async function watchCssChanges() {
  const watcher = chokidar.watch(sourceCssFilePath);
  watcher.on('add', processCss);
  watcher.on('change', processCss);
}

if (prod) {
  await context.rebuild();
  await processCss();
  process.exit(0);
} else {
  await Promise.all([watchCopyToVault(), watchCssChanges(), context.watch()]);
}
